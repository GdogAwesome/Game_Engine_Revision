precision mediump float;

uniform sampler2D u_Texture;
uniform sampler2D u_NormalMap;
uniform vec3 u_LightPos;
uniform int u_AnimFrame;
uniform vec3 u_lightColor;

varying vec2 v_TexCoordinate;
varying vec3 v_Position;

const float intensity = .4;
const float height_scale = .01;


void main()
{
         vec3 glow = intensity * u_lightColor;

             // specular

             //parallax ?
                     //float height = texture2D(u_NormalMap, v_TexCoordinate).a;
                          // vec2 p = viewDir.xy / viewDir.z * (height * height_scale);

                          vec2 texCoords = v_TexCoordinate;// vec2(v_TexCoordinate.x - p.x , v_TexCoordinate.y); // =  v_TexCoordinate -viewDir.xy * (height * height_scale);

              //
              vec3 normal = texture2D(u_NormalMap, texCoords).rgb;
                normal = normalize(normal * 2.0 -1.0);

              //height map
              float height =  texture2D(u_NormalMap, texCoords).a;
              height = 1.0;// normalize(height * 2.0 - 1.0);
              vec3 heightPos = vec3(v_Position.xy, v_Position.z * height);

               vec3 viewDir = normalize(vec3(0.0, 0.0, 1.5) - heightPos);//this is wrong but gave a satisfactory result so I will fix it later, maybe...

                vec4 color = texture2D(u_Texture,texCoords);

                          // ambient
                             vec3 ambient = .4 * color.xyz;
                             // diffuse
                             vec3 lightDir = normalize(u_LightPos - heightPos);
                             float diff = max(dot(lightDir, normal), 0.0);
                             //vec3 glowDiff = (diff * .75) * glow;
                             vec3 diffuse = diff * color.xyz;


             vec3 reflectDir = reflect(-lightDir, normal);
             vec3 halfwayDir = normalize(lightDir + viewDir);
             float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

             vec3 specular = vec3(glow) * spec;//vec3(0.15) * spec;


	       gl_FragColor = vec4(ambient + diffuse + specular , color.w);//vec4(texture2D(u_Texture, v_TexCoordinate).rgb, texture2D(u_Texture, v_TexCoordinate));

}